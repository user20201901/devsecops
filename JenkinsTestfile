pipeline {
    agent any

    environment {
        registry = "mm167/numeric-app"
        registryCredential = 'docker-hub'
        deploymentName = "devsecops"
        containerName = "devsecops-container"
        serviceName = "devsecops-svc"
        imageName = "mm167/numeric-app:${BUILD_NUMBER}"
        applicationURL = "http://192.168.49.2"
        applicationURI = "/increment/99"
    }

    stages {
        stage('Build Artifact') {
            steps {
              sh "mvn clean package -DskipTests=true"
              archive 'target/*.jar' //so that they can be downloaded later
            }
        }

        stage('Unit Tests - JUnit and Jacoco') {
          when { expression { true } }
          steps {
            sh "mvn test"
          }
          post {
            always {
              junit 'target/surefire-reports/*.xml'
              jacoco execPattern: 'target/jacoco.exec'
            }
          }
        }
        stage('Mutation Tests - PIT') {
          when { expression { true } }
          steps {
            sh "mvn org.pitest:pitest-maven:mutationCoverage"
          }
          post {
            always {
              pitmutation mutationStatsFile: '**/target/pit-reports/**/mutations.xml'
            }
          }
        }
        stage('SonarQube - SAST') {
        when { expression { true } }
          steps {
            withSonarQubeEnv('SonarQube') {
               sh "mvn clean verify sonar:sonar -Dsonar.projectKey=numeric-application -Dsonar.projectName='numeric-application' -Dsonar.host.url=http://192.168.33.10:9000"
             }
            timeout(time: 2, unit: 'MINUTES') {
              script {
                waitForQualityGate abortPipeline: true
              }
            }
          }
        }

        stage('Vulnerability Scan - Docker ') {
           when { expression { true } }
          steps {
              parallel(
                  "Dependency Scan": {
                    sh "mvn dependency-check:check"
                  },
                  "Trivy Scan": {
                    sh "bash security/trivy-docker-image-scan.sh"
                  },
                  "OPA Conftest": {
                    sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy security/opa-docker-security.rego Dockerfile'
                  }
              )
          }
          post {
            always {
              dependencyCheckPublisher pattern: 'target/dependency-check-report.xml'
            }
          }
        }
        stage('Docker Build and Push') {
          when { expression { false } }
          steps {
            withDockerRegistry([credentialsId: "docker-hub", url: ""]) {
              sh 'printenv'
              sh 'docker build -t $registry:$BUILD_NUMBER .'
              sh 'docker push $registry:$BUILD_NUMBER'

            }
          }
        }

        stage('Remove Unused docker image') {
          when { expression { false } }
          steps{
            sh "docker rmi $registry:$BUILD_NUMBER"
          }
        }

        stage('Vulnerability Scan - Kubernetes') {
          when { expression { false } }
          steps {
            parallel(
              "OPA Scan": {
                sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy security/opa-k8s-security.rego k8s_deployment_service.yaml'
              },
              "Kubesec Scan": {
                sh "bash security/kubesec-scan.sh"
              },
              "Trivy Scan": {
                sh "bash security/trivy-k8s-scan.sh"
              }
            )
          }
        }

        stage('Kubernetes Deployment - DEV') {
          when { expression { false } }
          steps {
            withKubeConfig([credentialsId: 'kubernetes-config']) {
              sh "bash script/k8s-deployment.sh"
            }
          }
        }
        stage('Kubernetes Rollout') {
          when { expression { false } }
          steps {
            withKubeConfig([credentialsId: 'kubernetes-config']) {
              sh "bash script/k8s-deployment-rollout-status.sh"
            }
          }
        }

        stage('Integration Tests - DEV') {
          when { expression { false } }
          steps {
            script {
              try {
                withKubeConfig([credentialsId: 'kubernetes-config']) {
                  sh "bash script/integration-test.sh"
                }
              } catch (e) {
                withKubeConfig([credentialsId: 'kubernetes-config']) {
                  sh "kubectl -n default rollout undo deploy ${deploymentName}"
                }
                throw e
              }
            }
          }
        }

        stage('OWASP ZAP - DAST') {
          when { expression { false } }
          steps {
            withKubeConfig([credentialsId: 'kubernetes-config']) {
              sh 'bash security/zap.sh'
            }
          }
        }
    }

    //  post {
        // always {
           // publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'owasp-zap-report', reportFiles: 'zap_report.html', reportName: 'OWASP ZAP HTML Report', reportTitles: 'OWASP ZAP HTML Report'])
        // }

        // success {

        // }

        // failure {

        // }
     //  }
}
